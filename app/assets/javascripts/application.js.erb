// This is a manifest file that'll be compiled into application.js, which will include all the files
// listed below.
//
// Any JavaScript/Coffee file within this directory, lib/assets/javascripts, vendor/assets/javascripts,
// or vendor/assets/javascripts of plugins, if any, can be referenced here using a relative path.
//
// It's not advisable to add code directly here, but if you do, it'll appear at the bottom of the
// compiled file.
//
// Read Sprockets README (https://github.com/sstephenson/sprockets#sprockets-directives) for details
// about supported directives.
//
//= require jquery
//= require jquery_ujs
//= require bootstrap-sprockets
//= require dataTables/jquery.dataTables
//= require dataTables/bootstrap/3/jquery.dataTables.bootstrap
//= require lightbox2/javascripts/lightbox
//= require_tree .

// The app path without parameters
var APP_PATH = window.location.pathname;

$(document).ready( function() {

    var table = $('#job_status_table').DataTable({
        ajax: APP_PATH + '/json',    // 'pages#json'
        "sAjaxDataProp": "",        // There's no data header on the json.
        autoWidth: true,            // Automatically calculate column width
        "lengthMenu": [ [10, 25, 50, -1], [10, 25, 50, "All"] ], // Manually set size of particular columns
        "bStateSave": true,         // Save user selected table state
        "aaSorting": [],            // Turn off auto sort.
        "pageLength": 50,           // Set the number of rows
        "fnInitComplete":           function( oSettings ) {
                                        for ( var i=0, iLen=oSettings.aoData.length ; i<iLen ; i++ )
                                        {
                                            // Add green background to user rows
                                            if (oSettings.aoData[i]._aData.username == JobStatusapp.username) {
                                                oSettings.aoData[i].nTr.className += " bg-success";
                                            // Add blue background to group rows
                                            } else if (oSettings.aoData[i]._aData.group == 
JobStatusapp.group) {
                                                oSettings.aoData[i].nTr.className += " bg-info";
                                            }
                                        }
                                    },
        processing: true,           // Add the "processing" while json is being downloaded.
        columns: [
            {
                "className":        'details-control',
                "orderable":        false,
                "data":             null,
                "defaultContent":   '',
                "width":            "20px"
            },
            {
                data:               "pbsid",
                className:          "small",
                "autoWidth":        true
            },
            {
                data:               "jobname",
                className:          "small",
                "width":            "40%"
            },
            {
                data:               "username",
                className:          "small",
                "autoWidth":        true
            },
            {
                data:               "group",
                className:          "small",
                "autoWidth":        true
            },
            {
                data:               "status",
                className:          "small",
                "autoWidth":        true,
                "render":           function(data) {
                                        return status_label(data);
                                    }
            },
            {
                data:               "cluster",
                className:          "small",
                "render":           function(data) {
                                        return data.charAt(0).toUpperCase() + data.substr(1);
                                    }
            }
        ]
    });
        // Optional, if you want full pagination controls.
        // Check dataTables documentation to learn more about available options.
        // http://datatables.net/reference/option/pagingType

    // Add event listener for opening and closing details
    $('#job_status_table tbody').on('click', '.details-control', function () {
        var tr = $(this).closest('tr');
        var row = table.row( tr );

        if ( row.child.isShown() ) {
            // This row is already open - close it
            row.child.hide();
            tr.removeClass('shown');
        }
        else {
            // Open this row
            row.child( format(row.data()) ).show();
            tr.addClass('shown');
            $.getJSON(APP_PATH + '/json?pbsid='+row.data().pbsid+'&host='+row.data().cluster , function(data) {
              $( "#" + EncodeCSS(row.data().pbsid)).hide().html(display_enhanced_job_data(data)).fadeIn(250);
            });
        }
    });
});

/* Prepares a CSS class compatible selection string based on a string */
function EncodeCSS(pbsid) {
  return pbsid
      .replace(/\[/g, '\\[')
      .replace(/\]/g, '\\]')
      .replace(/\./g, '_');
}

/* Formatting function for dropdown row. */
function format ( d ) {
    // `d` is the original data object for the row
    return          '<table>' +
                    '   <div class="panel panel-default">' +
                        display_job_info(d) +
                        display_node_rows(d) +
                    '   </div>' +
                    '</table>';
}

/* A function that builds a job data view */
function display_job_info( d ) {
    return          '<tr class="col-xs-12>' +
                    '   <div class="col-xs-12">' +
                    '       <tr><div class="job_data" id="'+d.pbsid.replace(/\./g, '_')+'"></div></tr>' +
                    '   </div>' +
                    '</tr>';
}

/* Build the ganglia images view */
function display_node_rows( d ) {
    var rows = "";
    // Ganglia accepts timestamps in seconds, not millis.
    var start = d.starttime;
    if (d.nodes != null) {
        for (node in d.nodes) {
            var node_num = d.nodes[node];
            rows += '<div class="col-md-12">' +
                    '   <tr>' +
                    '       <td>' +
                    '           <div class="panel panel-default">' +
                    '              <div class="panel-heading"><h3 class="panel-title">' + node_num + '.ten.osc.edu <span class="pull-right">' + d.pbsid + '</span></h3></div>' +
                    '              <div class="panel-body">' +
                    '                   <a href="'+ build_ganglia_link(d.cluster, start, 'cpu_report', node_num, 'large') +'" data-lightbox="cpu-report" data-title="CPU Report '+node_num+'.ten.osc.edu"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-6" src="'+build_ganglia_link(d.cluster, start, 'cpu_report', node_num, 'small')+'" /></a>' +
                    '                   <a href="'+ build_ganglia_link(d.cluster, start, 'load_report', node_num, 'large') +'" data-lightbox="load-report" data-title="Load Report '+node_num+'.ten.osc.edu"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-6" src="'+build_ganglia_link(d.cluster, start, 'load_report', node_num, 'small')+'" /></a>' +
                    '                   <a href="'+ build_ganglia_link(d.cluster, start, 'mem_report', node_num, 'large') +'" data-lightbox="mem-report" data-title="Memory Report '+node_num+'.ten.osc.edu"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-6" src="'+build_ganglia_link(d.cluster, start, 'mem_report', node_num, 'small')+'" /></a>' +
                    '                   <a href="'+ build_ganglia_link(d.cluster, start, 'network_report', node_num, 'large') +'" data-lightbox="network-report" data-title="Network Report '+node_num+'.ten.osc.edu"><img class="img-responsive col-lg-3 col-md-3 col-sm-6 col-xs-6" src="'+build_ganglia_link(d.cluster, start, 'network_report', node_num, 'small')+'" /></a>' +
                    '              </div>' +
                    '           </div>' +
                    '       </td>' +
                    '   </tr>' +
                    '</div>';
        }
    }
    return rows;
}

function display_enhanced_job_data( d ) {

    if (is_defined(d.error)) {
        return      '<div><tr><td>'+ d.error +'</td></tr></div>';
    } else {
        return      '<div>' +
                    '   <tr>' +
                    '        <td>' +
                    '            <div class="panel panel-default container-fluid">' +
                    '               <div class="panel-heading row clearfix">' +
                    '                   <strong>' +
                    '                       <div class="col-xs-1">' + status_label(d.status) + '</div>' +
                    '                       <div class="col-xs-11" style="word-wrap: break-word;">' + d.jobname +
                    '                       <div>('+ d.pbsid +')</div></div>' +
                    '                   </strong>' +
                    '               </div>' +
                    '                <div class="panel-body">' +
                    '                   <div class="col-md-4"><div class="panel panel-default"><div class="panel-heading">Job Information</div><div class="panel-body">'+build_job_information_panel( d )+'</div></div></div>' +
                    '                   <div class="col-md-4"><div class="panel panel-default"><div class="panel-heading">Resources Requested</div><div class="panel-body">'+build_resources_requested_panel( d )+'</div></div></div>' +
                    '                   <div class="col-md-4"><div class="panel panel-default"><div class="panel-heading">Resources Used</div><div class="panel-body">'+build_resources_used_panel( d )+'</div></div></div>' +
                    '                   <div class="col-md-12"><span class="col-md-2">Submit Args: </span><pre class="col-md-10" style="white-space: pre-wrap;">'+ d.submit_args +'</pre></div>' +
                    '                   <div class="col-md-12"><span class="col-md-2">Output Location: </span><pre class="col-md-10" style="white-space: pre-wrap;">'+ d.output_path+'</pre></span></div>' +
                                        delete_button( d.pbsid.replace(/\./g, '_'), d.cluster, d.username ); +
                    '                </div>' +
                    '            </div>' +
                    '       </td>' +
                    '   </tr>' +
                    '</div>';
    }
}

function is_defined( object ) {
    if (object === undefined || object === null) {
        return false;
    } else {
        return true;
    }
}

function build_job_information_panel( d ) {
    var _Job_Name = d.jobname;
    var _username = d.username;
    var _group = d.group;
    var _walltime_requested = d.walltime;
    var _queue = d.queue;
    var _walltime_used = (is_defined(d.walltime_used) ? d.walltime_used : '0');
    return          label_data("Username", _username) +
                    label_data("Group Name", _group) +
                    label_data("Walltime", _walltime_used + " / " + _walltime_requested) +
                    label_data("Queue", _queue);
}

function build_resources_requested_panel( d ) {
    var _nodes_requested = d.nodect;
    var _processors_per_node = d.ppn;
    var _walltime_requested = d.walltime;
    var _total_cpu = d.total_cpu;
    return          label_data("Nodes", _nodes_requested) +
                    label_data("PPN", _processors_per_node) +
                    label_data("Total CPU", _total_cpu) +
                    label_data("Walltime", _walltime_requested);

}

function build_resources_used_panel( d ) {
    var _cput = is_defined(d.cput) ? d.cput : '0';
    var _mem = is_defined(d.mem) ? d.mem : '0';
    var _vmem = is_defined(d.vmem) ? d.vmem : '0';
    var _walltime_used = is_defined(d.walltime_used) ? d.walltime_used : '0';
    return          label_data("CPU Time", _cput) +
                    label_data("Memory", _mem) +
                    label_data("VMem", _vmem) +
                    label_data("Run Time", _walltime_used);
}

function delete_button( pbsid, host, user ) {
    if (user == JobStatusapp.username) {
        return '<div class="small pull-right" style="margin-top: 10px;"><button type="button" class="col-sm-12 btn btn-danger"' +
                ' onClick="delete_job(\''+pbsid+'\',\''+host+'\')">Delete</button></div>';
    } else {
        return '';
    }
}

function delete_job(pbsid, host) {
    if (confirm("Are you sure?")) {
        window.location = APP_PATH + "/delete_job/?pbsid=" + pbsid + "&host=" + host;
        return true;
    } else {
        return false;
    }
}

function label_data(label, data) {
    return '<div class="small col-sm-12" style="height: 100%; white-space: nowrap;"><strong class="col-sm-5">'+label+': </strong><span class="job_label_data col-sm-7">' + data + '</span></div>';
}

/* Formatting function for the status label. */
function status_label( status ) {
    var label, labelclass;
    switch( status ) {
        case "C":
            label = "Completed";
            labelclass = "label-success";
            break;
        case "R":
            label = "Running";
            labelclass = "label-primary";
            break;
        case "Q":
            label = "Queued";
            labelclass = "label-info";
            break;
        case "H":
            label = "Hold";
            labelclass = "label-warning";
            break;
        case "E":
            label = "Exiting";
            labelclass = "label-info";
            break;
        case "S":
            label = "Suspend";
            labelclass = "label-warning";
            break;
        case "T":
            label = "Transiting";
            labelclass = "label-warning";
            break;
        case "W":
            label = "Waiting";
            labelclass = "label-info";
            break;
        default:
            label = "Not Submitted";
            labelclass = "label-default";
    }
    return "<span class='label "+labelclass+"'>"+label+"</span>";
}
